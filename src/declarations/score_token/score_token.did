type User = 
 variant {
   address: AccountIdentifier;
   "principal": principal;
 };
type TransferResponse = 
 variant {
   err:
    variant {
      CannotNotify: AccountIdentifier;
      InsufficientBalance;
      InvalidToken: TokenIdentifier;
      Other: text;
      Rejected;
      Unauthorized: AccountIdentifier;
    };
   ok: Balance;
 };
type TransferRequest = 
 record {
   amount: Balance;
   from: User;
   memo: Memo;
   notify: bool;
   subaccount: opt SubAccount;
   to: User;
   token: TokenIdentifier;
 };
type TokenIdentifier__1 = text;
type TokenIdentifier = text;
type Token = 
 service {
   acceptCycles: () -> ();
   approve: (ApproveRequest) -> ();
   availableCycles: () -> (nat) query;
   balance: (BalanceRequest) -> (BalanceResponse) query;
   burn: (text, Balance__1) -> (bool, text);
   extensions: () -> (vec Extension) query;
   getAllScores: () -> (vec record {
                              AccountIdentifier__1;
                              Balance__1;
                            }) query;
   getBalance: (BalanceRequest) -> (BalanceResponse);
   metadata: (TokenIdentifier__1) -> (Result_1) query;
   mint: (principal, Balance__1) -> (bool, text);
   supply: (TokenIdentifier__1) -> (Result) query;
   transfer: (TransferRequest) -> (TransferResponse);
 };
type SubAccount = vec nat8;
type Result_1 = 
 variant {
   err: CommonError;
   ok: Metadata;
 };
type Result = 
 variant {
   err: CommonError;
   ok: Balance__1;
 };
type Metadata = 
 variant {
   fungible:
    record {
      decimals: nat8;
      image: text;
      metadata: opt blob;
      name: text;
      symbol: text;
    };
   nonfungible: record {metadata: opt blob;};
 };
type Memo = blob;
type Extension = text;
type CommonError__1 = 
 variant {
   InvalidToken: TokenIdentifier;
   Other: text;
 };
type CommonError = 
 variant {
   InvalidToken: TokenIdentifier;
   Other: text;
 };
type Balance__1 = nat;
type BalanceResponse = 
 variant {
   err: CommonError__1;
   ok: Balance;
 };
type BalanceRequest = 
 record {
   token: TokenIdentifier;
   user: User;
 };
type Balance = nat;
type ApproveRequest = 
 record {
   allowance: Balance;
   spender: principal;
   subaccount: opt SubAccount;
   token: TokenIdentifier;
 };
type AccountIdentifier__1 = text;
type AccountIdentifier = text;
service : (text, text, text, nat8, Balance, principal) -> Token

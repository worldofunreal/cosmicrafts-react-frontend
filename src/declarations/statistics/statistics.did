type Statistics = 
 service {
   getAverageStats: () -> (AverageStats) query;
   getBasicStats: (GameID) -> (opt BasicStats) query;
   getMyAverageStats: () -> (opt AverageStats) query;
   getMyStats: () -> (opt PlayerGamesStats) query;
   getOverallStats: () -> (OverallStats) query;
   saveFinishedGame: (GameID, BasicStats) -> (bool);
 };
type PlayerGamesStats = 
 record {
   energyGenerated: float64;
   energyUsed: float64;
   energyWasted: float64;
   gamesLost: nat;
   gamesPlayed: nat;
   gamesWon: nat;
   totalDamageCrit: float64;
   totalDamageDealt: float64;
   totalDamageEvaded: float64;
   totalDamageTaken: float64;
   totalGamesGameMode: vec GamesWithGameMode;
   totalGamesWithCharacter: vec GamesWithCharacter;
   totalGamesWithFaction: vec GamesWithFaction;
   totalXpEarned: float64;
 };
type OverallStats = 
 record {
   totalDamageDealt: float64;
   totalEnergyGenerated: float64;
   totalEnergyUsed: float64;
   totalEnergyWasted: float64;
   totalGamesGameMode: vec GamesWithGameMode;
   totalGamesMP: nat;
   totalGamesPlayed: nat;
   totalGamesSP: nat;
   totalGamesWithCharacter: vec GamesWithCharacter;
   totalGamesWithFaction: vec GamesWithFaction;
   totalKills: float64;
   totalTimePlayed: float64;
   totalXpEarned: float64;
 };
type GamesWithGameMode = 
 record {
   gameModeID: nat;
   gamesPlayed: nat;
   gamesWon: nat;
 };
type GamesWithFaction = 
 record {
   factionID: nat;
   gamesPlayed: nat;
   gamesWon: nat;
 };
type GamesWithCharacter = 
 record {
   characterID: text;
   gamesPlayed: nat;
   gamesWon: nat;
 };
type GameID = nat;
type BasicStats = 
 record {
   botDifficulty: nat;
   botMode: nat;
   characterID: text;
   damageCritic: float64;
   damageDealt: float64;
   damageEvaded: float64;
   damageTaken: float64;
   deploys: float64;
   energyChargeRate: float64;
   energyGenerated: float64;
   energyUsed: float64;
   energyWasted: float64;
   faction: nat;
   gameMode: nat;
   kills: float64;
   secRemaining: float64;
   wonGame: bool;
   xpEarned: float64;
 };
type AverageStats = 
 record {
   averageDamageDealt: float64;
   averageEnergyGenerated: float64;
   averageEnergyUsed: float64;
   averageEnergyWasted: float64;
   averageKills: float64;
   averageXpEarned: float64;
 };
service : () -> Statistics
